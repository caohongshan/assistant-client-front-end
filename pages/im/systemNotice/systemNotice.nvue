<template>
	<view class="container">
		<text class="tips" v-if="tips">{{tips}}</text>
		<uni-list :border="false">
			<template v-if="systemNoticeDatas && systemNoticeDatas.length">
				<uni-list-chat v-for="(item,index) in systemNoticeDatas" :key="item.id"
					:avatarCircle="true" :clickable="true"
					:badge-text="item.is_read?'':'dot'" badgePositon="left"
					:title="item.payload.title||item.title"
					:note="item.payload.content||item.content||'无'"
					:avatar="item.payload.avatar_file&&item.payload.avatar_file.url ? item.payload.avatar_file.url : '/uni-im/static/noticeIcon/systemNotice2.png'"
					@click.native="clickHandle(index,item)" direction="column" :time="formatTime(item.create_time)"
				>
					<view class="handle-box">
						<template v-if="item.payload.state">
							<text class="handle done">
								{{'已'+(item.payload.state == 'confirm'?item.payload.confirmText:item.payload.cancelText)}}
							</text>
						</template>
						<template v-else>
							<text class="handle" 
								@click.stop="doAction(index,0)"
								v-if="item.payload.cancelText"
								>{{item.payload.cancelText}}</text>
							<text 
								class="handle"
								@click.stop="doAction(index,1)"
								v-if="item.payload.confirmText"
							>{{item.payload.confirmText}}</text>
							<uni-icons v-if="!item.payload.cancelText && !item.payload.confirmText && item.path"
								type="right" color="#cccccc"></uni-icons>
						</template>
					</view>
				</uni-list-chat>
			</template>
			<uni-list-item v-else class="load-more">
				<template v-slot:body>
					<uni-load-more class="tip" :status="systemNoticeState?'noMore':'loading'"></uni-load-more>
				</template>
			</uni-list-item>
		</uni-list>
	</view>
</template>

<script>
	import uniImUtils from '@/common/utils.js';
	import action from './action.js';
	const db = uniCloud.database();
	import {
		mapState,
		mapGetters,
		mapMutations
	} from 'vuex';
	export default {
		data() {
			return {
				isWidescreen: false,
				filterNotice:{},
				tips:""
				// systemNoticeDatas:[]
			}
		},
		async onLoad({param}) {
			// console.log(param,decodeURIComponent(param))
			param = JSON.parse(decodeURIComponent(param))
			// console.log(param)
			this.setParam(param)
		},
		async mounted() {
			// #ifdef H5
			const mediaQueryOb = uni.createMediaQueryObserver(this);
			mediaQueryOb.observe({
					minWidth: 960
				},
				matches => {
					this.isWidescreen = matches;
				}
			);
			// #endif
		},
		computed: {
			systemNoticeDatas(){
				// console.log('212231321',this.filterNotice,this.$store.getters['uniIm/systemNoticeDatas'](this.filterNotice));
				return this.$store.getters['uniIm/systemNoticeDatas'](this.filterNotice)
			},
			systemNoticeState(){
				return this.$store.state.uniIm.systemNoticeDatas
			}
		},
		methods: {
			...mapMutations({
				setSystemNoticeDatas: 'uniIm/setSystemNoticeDatas',
			}),
			setParam({filterNotice,title}){
				if(typeof filterNotice == 'string'){
					filterNotice = JSON.parse(decodeURIComponent(filterNotice))
				}
				this.filterNotice = filterNotice
				uni.setNavigationBarTitle({
					title
				})

				if(title == '新朋友' && !this.isWidescreen){
					this.tips = '好友请求通知'
				}
			},
			async setItem({_id},param){
				const datas = JSON.parse(JSON.stringify(this.$store.state.uniIm.systemNoticeDatas))
				for (let i = 0; i < datas.length; i++) {
					if(datas[i]._id == _id){
						datas[i] = deepAssign(datas[i],param)
						this.setSystemNoticeDatas(datas)
						break;
					}
				}
				
				let ares = await db.collection('uni-push-message')
									.where(`"_id" == "${_id}" && "user_id" == $cloudEnv_uid`)
									.get()
				// console.log(13231,ares);
				let res = await db.collection('uni-push-message')
									.where(`"_id" == "${_id}" && "user_id" == $cloudEnv_uid`)
									.update(param)
				// console.log('res---66666',param,res.result.updated);
				
				/**
				*判断对象是否是一个纯粹的对象
				*/
				function isPlainObject(obj){
				    return typeof obj === 'object' && Object.prototype.toString.call(obj) === '[object Object]'
				}
				/**
				*深度合并多个对象的方法
				*/
				function deepAssign( ){
				    let len = arguments.length, target = arguments[0]
				    if(!isPlainObject(target)){
				        target = {}
				    }
				    for (let i = 1; i < len; i++){
				        let source = arguments[i]
				        if( isPlainObject( source ) ){
				            for( let s in source ){
				                if ( s === '__proto__' || target === source[s] ) {
				                    continue
				                }
				                if( isPlainObject( source[s] ) ){
				                    target[s] = deepAssign(target[s], source[s])
				                }else{
				                    target[s] = source[s]
				                }
				            }
				        }
				    }
				    return target
				}
			},
			async clickHandle(index,item){
				// console.log('index',index,item);
				//如果未读，设置为已读
				if(!item.is_read){
					this.setItem(item,{is_read:true})
				}
				//存在链接就跳转
				let path = item.path || item.payload.path
				if(path){
					uni.navigateTo({
						url:path,
						fail: (e) => {
							console.log(e);
						}
					})
				}
				// let item = this.systemNoticeDatas[index]
				// item.data.is_read = true
				// this.systemNoticeDatas[index] = Object.assign({},item)
				// console.log(this.systemNoticeDatas);
			},
			doAction(index,type){
				let item = this.systemNoticeDatas[index]
				let e = {
					subType:item.payload.subType,
					confirm:type===1,
					cancel:type===0,
					item
				}
				action(e,data=>{
					this.setItem(item,{
						is_read:true,
						payload:{
							state : type===1?'confirm':'cancel'
						}
					})
				})
				// console.log(index);
			},
			formatTime(timestamp) {
				return uniImUtils.formatTime(timestamp)
			},
			handleText(state){
				switch (state){
					case 0:
						return '同意'
						break;
					case 100:
						return '已同意'
						break;
					case -100:
						return '已拒绝'
						break;
					default:
						return '其他'
						break;
				}
			}
		}
	}
</script>

<style lang="scss" scoped>
	.container{
		width: 750rpx;
		flex: 1;
		/* #ifndef APP-NVUE */
		height: 100vh;
		width: 100vw;
		/* #endif */
		background-color: #f5f5f5;
	}
	.tips{
		height: 40px;
		line-height: 40px;
		padding-left: 20rpx;
		font-size: 26rpx;
		color: #666;
	}
	.handle-box{
		flex-direction: row;
		height: 40px;
		align-items: center;
	}
	.handle{
		width: 50px;
		text-align: center;
		height: 25px;
		line-height: 25px;
		background-color: #efefef;
		border-radius: 50px;
		font-size: 12px;
		margin:0 5px;
		/* #ifdef H5 */
		cursor: pointer;
		/* #endif */
	}
	.done{
		width: 50px;
		background-color: #FFF;
		color: #aaa;
		/* #ifdef H5 */
		cursor: default;
		/* #endif */
	}
	.load-more{
		background-color: #f5f5f5!important;
		justify-content: center;
	}
	.tip{
		position: relative;
		left: -15px;
		width: 750rpx;
		/* #ifndef APP-NVUE */
		width: 100vw;
		/* #endif */
	}
</style>
